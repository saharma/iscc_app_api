service: isccappapi

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-symptoms
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  region: eu-west-1

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ symptoms, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: createSymptom.main
    events:
      - http:
          path: symptoms
          method: post
          cors: true
          authorizer: aws_iam

  create2:
    handler: createDocLog.main
    events:
      - http:
          path: doclog
          method: post
          cors: true
          authorizer: aws_iam      

          
  createFood:
    handler: createFood.main
    events:
      - http:
          path: food
          method: post
          cors: true
          authorizer: aws_iam  

  createDietLog:
    handler: createDietLog.main
    events:
      - http:
          path: dietlog
          method: post
          cors: true
          authorizer: aws_iam          
  get:
    handler: getSymptom.main
    events:
      - http:
          path: symptoms/{id}
          method: get
          cors: truee
          authorizer: aws_iam  

  get2:
    handler: getDocLog.main
    events:
      - http:
          path: doclog/{id}
          method: get
          cors: truee
          authorizer: aws_iam         

  list:
    handler: listSymptom.main
    events:
      - http:
          path: symptoms
          method: get
          cors: true
          authorizer: aws_iam             

  list2:
    handler: listDocLog.main
    events:
      - http:
          path: doclog
          method: get
          cors: true
          authorizer: aws_iam 

  update:
    handler: updateSymptom.main
    events:
      - http:
          path: symptoms/{id}
          method: put
          cors: true
          authorizer: aws_iam        

  update2:
    handler: updateDocLog.main
    events:
      - http:
          path: doclog/{id}
          method: put
          cors: true
          authorizer: aws_iam    
   
  delete:
    handler: deleteSymptom.main
    events:
      - http:
          path: symptoms/{id}
          method: delete
          cors: true
          authorizer: aws_iam
          
  delete2:
    handler: deleteDocLog.main
    events:
      - http:
          path: doclog/{id}
          method: delete
          cors: true
          authorizer: aws_iam      
# Create our resources with separate CloudFormation templates
resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  - ${file(resources/cognito-user-pool.yml)}